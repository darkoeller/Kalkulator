<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>PostSharp.Patterns.Diagnostics.Backends.Serilog</name>
  </assembly>
  <members>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.ISerilogContextInfo">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:PostSharp.Patterns.Diagnostics.Backends.Serilog.ISerilogContextInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogAsyncCustomActivityContext">
      <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncCustomActivityLoggingContext" /> for <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogAsyncCustomActivityContext.#ctor(PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogAsyncCustomActivityContext" />.
            </summary>
      <param name="backend">The parent <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend" />.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogAsyncMethodLoggingContext">
      <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext" /> for <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogAsyncMethodLoggingContext.#ctor(PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogAsyncCustomActivityContext" />.
            </summary>
      <param name="backend"></param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogIteratorLoggingContext">
      <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.IteratorLoggingContext" /> for <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogIteratorLoggingContext.#ctor(PostSharp.Patterns.Diagnostics.LoggingBackend)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogIteratorLoggingContext" />.
            </summary>
      <param name="backend"></param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend">
      <summary>
            Logging back-end for Serilog.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend.ClearMessageTemplateCache">
      <summary>
            Clears the message template cache.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend.CreateAsyncCustomActivityContext">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncCustomActivityLoggingContext" />.
            </summary>
      <returns>A new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncCustomActivityLoggingContext" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend.CreateAsyncMethodContext">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext" /> for a given async method.
            </summary>
      <returns>A new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend.CreateIteratorContext">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.IteratorLoggingContext" /> for a given iterator method.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend.CreateIteratorContext</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend.CreateRecordBuilder">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" />.
            </summary>
      <returns>A new <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend.CreateSyncCustomActivityContext(PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext)">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext" />.
            </summary>
      <param name="threadContext">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" /> in which the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext" /> will be used.</param>
      <returns>A new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext" /> to be used only in the thread of <paramref name="threadContext" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend.CreateSyncMethodContext(PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext)">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SyncMethodLoggingContext" /> for a given normal (non-async, non-iterator) method.
            </summary>
      <param name="threadContext">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" /> in which the method is executed.</param>
      <returns>A new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SyncMethodLoggingContext" /> to be used only in the thread of <paramref name="threadContext" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend.CreateTypeSource(PostSharp.Patterns.Diagnostics.LoggingNamespaceSource,System.Type)">
      <summary>
            Creates <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" /> for the given role and type.
            </summary>
      <param name="parent">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>parent</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend.CreateTypeSource(PostSharp.Patterns.Diagnostics.LoggingNamespaceSource,System.Type)</parameter>
          </include>
        </markup>
      </param>
      <param name="type">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>type</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend.CreateTypeSource(PostSharp.Patterns.Diagnostics.LoggingNamespaceSource,System.Type)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend.CreateTypeSource(PostSharp.Patterns.Diagnostics.LoggingNamespaceSource,System.Type)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend.GetTextBackendOptions">
      <summary>
            Gets the options.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend.GetTextBackendOptions</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend.MessageTemplateCacheSize">
      <summary>
            Gets the number of items in the message template cache.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend.Options">
      <summary>
            Gets the back-end options.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackendOptions">
      <summary>
            Options for <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackendOptions.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackendOptions" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackendOptions.GetLogger">
      <summary>
            Function mapping an <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingTypeSource" /> to a Serilog <c>ILogger</c>.
            The default behavior is to call <c>Log.ForContext( typeSource.Type )</c>.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackendOptions.SemanticParametersRequiredTreatedSemantically">
      <summary>
            Kinds of semantic parameters that are required to be mapped to Serilog parameters. This is the default value of the <see cref="P:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackendOptions.SemanticParametersTreatedSemantically" /> property.
            This constant is set to <c>ParameterValue | Exception | ReturnValue | ReturnItemValue | Duration | This</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackendOptions.SemanticParametersTreatedSemantically">
      <summary>
            Gets or sets the kinds of semantic parameters that must be mapped to Serilog semantic parameters. 
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackendOptions.UseSerilogFormatters">
      <summary>
            Determines whether Serilog formatters should be used instead of PostSharp formatters. The default value is <c>false</c>.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingTypeSource">
      <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" /> for <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingTypeSource.#ctor(PostSharp.Patterns.Diagnostics.LoggingNamespaceSource,System.Type)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingTypeSource" />.
            </summary>
      <param name="parent">The parent <see cref="T:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource" />.</param>
      <param name="type">The <see cref="T:System.Type" /> being logged.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingTypeSource.IsBackendEnabled(PostSharp.Patterns.Diagnostics.LogLevel)">
      <summary>
            Checks whether logging is enabled in the back-end for the given level.
            </summary>
      <param name="level">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>level</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingTypeSource.IsBackendEnabled(PostSharp.Patterns.Diagnostics.LogLevel)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingTypeSource.IsBackendEnabled(PostSharp.Patterns.Diagnostics.LogLevel)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder">
      <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> for <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.#ctor(PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend)">
      <summary>
            Creates an instance of <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder" />/
            </summary>
      <param name="backend">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>backend</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.#ctor(PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.AppendContextDescription">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.AppendContextDescription</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.AppendContextDescription</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.AppendIndentString(System.Int32)">
      <summary>
            Appends indentation for the given <paramref parameterName="indentLevel" /> to <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
      <param name="additionalIndent">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>additionalIndent</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.AppendIndentString(System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.AppendProlog">
      <summary>
            Appends the indent string, context description, and the record kind to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.AppendSemanticParameter``1(PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind,System.ArraySegment{System.Char},``0,PostSharp.Patterns.Formatters.IFormatter{``0},System.String,System.Int32)">
      <summary>
            Appends a parameter to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />, where the name is given as a <see cref="T:System.ArraySegment`1" />, and uses a specific formatter. Back-ends that
            support semantic logging may store the parameter value semantically instead of appending it to the <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
      <param name="kind">Kind of semantic parameter.</param>
      <param name="prefix">Prefix to be prepended to <paramref name="name" />, or <c>null</c> if there is no prefix.</param>
      <param name="name">Parameter name. The <paramref name="name" /> parameter itself is not guaranteed to be unique in a given record. However,
            in combination with <paramref name="prefix" /> and <paramref name="index" />, it is guaranteed to be unique.</param>
      <param name="value">Parameter value.</param>
      <param name="index">Index of the parameter value, if there are several values for the same parameter name, or <c>-1</c>
            if there is a single parameter value for this parameter name.</param>
      <param name="formatter">The formatter to be used to format <paramref name="value" />.</param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.AppendSemanticParameter``1(PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind,System.ArraySegment{System.Char},``0,PostSharp.Patterns.Formatters.IFormatter{``0},System.String,System.Int32)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.AppendSemanticParameter(PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind,System.String,System.String,System.String,System.Int32)">
      <summary>
            Appends a parameter of <see cref="T:System.String" /> type to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />. Back-ends that
            support semantic logging may store the parameter value semantically instead of appending it to the <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
      <param name="kind">Kind of semantic parameter.</param>
      <param name="prefix">Prefix to be prepended to <paramref name="name" />, or <c>null</c> if there is no prefix.</param>
      <param name="name">Parameter name. The <paramref name="name" /> parameter itself is not guaranteed to be unique in a given record. However,
            in combination with <paramref name="prefix" /> and <paramref name="index" />, it is guaranteed to be unique.</param>
      <param name="value">Parameter value.</param>
      <param name="index">Index of the parameter value, if there are several values for the same parameter name, or <c>-1</c>
            if there is a single parameter value for this parameter name.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.AppendSemanticParameter``1(PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind,System.String,``0,PostSharp.Patterns.Formatters.IFormatter{``0},System.String,System.Int32)">
      <summary>
            Appends a parameter to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />, where the name is given as a <see cref="T:System.String" />, and uses a specific formatter. Back-ends that
            support semantic logging may store the parameter value semantically instead of appending it to the <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
      <param name="kind">Kind of semantic parameter.</param>
      <param name="prefix">Prefix to be prepended to <paramref name="name" />, or <c>null</c> if there is no prefix.</param>
      <param name="name">Parameter name. The <paramref name="name" /> parameter itself is not guaranteed to be unique in a given record. However,
            in combination with <paramref name="prefix" /> and <paramref name="index" />, it is guaranteed to be unique.</param>
      <param name="value">Parameter value.</param>
      <param name="index">Index of the parameter value, if there are several values for the same parameter name, or <c>-1</c>
            if there is a single parameter value for this parameter name.</param>
      <param name="formatter">The formatter to be used to format <paramref name="value" />.</param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.AppendSemanticParameter``1(PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind,System.String,``0,PostSharp.Patterns.Formatters.IFormatter{``0},System.String,System.Int32)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.BeginRecord(PostSharp.Patterns.Diagnostics.Contexts.LoggingContext,PostSharp.Patterns.Diagnostics.Contexts.LogRecordInfo@,PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.BeginRecord(PostSharp.Patterns.Diagnostics.Contexts.LoggingContext,PostSharp.Patterns.Diagnostics.Contexts.LogRecordInfo@,PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.BeginRecord(PostSharp.Patterns.Diagnostics.Contexts.LoggingContext,PostSharp.Patterns.Diagnostics.Contexts.LogRecordInfo@,PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="recordInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>recordInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.BeginRecord(PostSharp.Patterns.Diagnostics.Contexts.LoggingContext,PostSharp.Patterns.Diagnostics.Contexts.LogRecordInfo@,PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo@)</parameter>
          </include>
        </markup>
      </param>
      <param name="memberInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>memberInfo</parameter>
            <parameter>M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.BeginRecord(PostSharp.Patterns.Diagnostics.Contexts.LoggingContext,PostSharp.Patterns.Diagnostics.Contexts.LogRecordInfo@,PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo@)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.EmitRecord">
      <summary>
            Emits the record. Invoked by the <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.Complete" /> method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.EndContextDescription">
      <summary>
            Ends building the context <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Description" /> and starts building the action text.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.MessageTemplateTokens">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.MessageTemplateTokens</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.Properties">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.Properties</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.Reset">
      <summary>
            Resets all fields and properties of the current <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> to their initial value. Invoked by the
            <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.Complete" /> method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLogRecordBuilder.Write(PostSharp.Patterns.Formatters.UnsafeString)">
      <summary>
            Writes the final message to the back-end.
            </summary>
      <param name="message">The final message.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogSemanticParameterOptions">
      <summary>
            Define options for a specific kind of semantic parameter.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogSemanticParameterOptions.Semantic">
      <summary>
            Gets the semantic whose the current object represents the options.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogSemanticParameterOptions.TreatAsSemanticParameter">
      <summary>
            Determines whether the PostSharp semantic parameter should be passed to Serilog as a semantic parameter. If <c>false</c>, the
            value of the semantic parameter passed by PostSharp is simply appended  to the message formatting string, without defining a 
            Serilog semantic parameter. 
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogSemanticParameters">
      <summary>
            Exposes the options (<see cref="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogSemanticParameterOptions" />) for individual kinds of Serilog semantic parameters through an indexer. This class can be enumerated.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogSemanticParameters.Item(PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind)">
      <summary>
            Gets the options for a given semantic.
            </summary>
      <param name="semantic"></param>
      <returns></returns>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogSyncCustomActivityContext">
      <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext" /> for <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogLoggingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogSyncCustomActivityContext.#ctor(PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogSyncCustomActivityContext" />.
            </summary>
      <param name="threadContext">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" /> to which the context shall belong.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogSyncMethodLoggingContext">
      <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SyncMethodLoggingContext" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogSyncMethodLoggingContext.#ctor(PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogSyncMethodLoggingContext" />.
            </summary>
      <param name="threadContext">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" /> to which the new context shall belong.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Serilog.SerilogSyncMethodLoggingContext.Dispose(System.Boolean)">
      <summary>
            Disposes the current object.
            </summary>
      <param name="disposing">
        <c>true</c> if the <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Dispose" /> method is called explicitly, <c>false</c> is the object is being finalized.</param>
    </member>
  </members>
</doc>