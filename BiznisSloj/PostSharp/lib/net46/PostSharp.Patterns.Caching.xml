<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>PostSharp.Patterns.Caching</name>
  </assembly>
  <members>
    <member name="T:PostSharp.Patterns.Caching.CacheAttribute">
      <summary>
            Custom attribute that, when applied on a method, causes the return value of the method to be cached
            for the specific list of arguments passed to this method call.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CacheAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Caching.CacheAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CacheAttribute.AbsoluteExpiration">
      <summary>
            Gets or sets the total duration, in minutes, during which the result of the current method is stored in cache. The absolute
            expiration time is counted from the moment the method is evaluated and cached.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CacheAttribute.AutoReload">
      <summary>
            Determines whether the method calls are automatically reloaded (by re-evaluating the target method with the same arguments)
            when the cache item is removed from the cache.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CacheAttribute.IgnoreThisParameter">
      <summary>
            Determines whether the <c>this</c> instance should be a part of the cache key. The default value of this property is <c>false</c>,
            which means that by default the <c>this</c> instance is a part of the cache key.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CacheAttribute.Priority">
      <summary>
            Gets or sets the priority of the current method.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CacheAttribute.ProfileName">
      <summary>
            Gets or sets the name of the <see cref="T:PostSharp.Patterns.Caching.CachingProfile" /> that contains the configuration of the current <see cref="T:PostSharp.Patterns.Caching.CacheAttribute" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CacheAttribute.SlidingExpiration">
      <summary>
            Gets or sets the duration, in minutes, during which the result of the current method is stored in cache after it has been
            added to or accessed from the cache. The expiration is extended every time the value is accessed from the cache.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.CacheConfigurationAttribute">
      <summary>
            Custom attribute that, when applied on a type, configures the <see cref="T:PostSharp.Patterns.Caching.CacheAttribute" /> aspects applied to the methods of this type
            or its derived types. When applied to an assembly, the <see cref="T:PostSharp.Patterns.Caching.CacheConfigurationAttribute" /> custom attribute configures all methods
            of the current assembly.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CacheConfigurationAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Caching.CacheConfigurationAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CacheConfigurationAttribute.AbsoluteExpiration">
      <summary>
            Gets or sets the total duration, in minutes, during which the result of the cached method  is stored in cache. The absolute
            expiration time is counted from the moment the method is evaluated and cached.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CacheConfigurationAttribute.AutoReload">
      <summary>
            Determines whether the method calls are automatically reloaded (by re-evaluating the target method with the same arguments)
            when the cache item is removed from the cache.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CacheConfigurationAttribute.IgnoreThisParameter">
      <summary>
            Determines whether the <c>this</c> instance should be a part of the cache key. The default value of this property is <c>false</c>,
            which means that by default the <c>this</c> instance is a part of the cache key.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CacheConfigurationAttribute.Priority">
      <summary>
            Gets or sets the priority of the cached method.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CacheConfigurationAttribute.ProfileName">
      <summary>
            Gets or sets the name of the <see cref="T:PostSharp.Patterns.Caching.CachingProfile" />  that contains the configuration of the cached methods.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CacheConfigurationAttribute.SlidingExpiration">
      <summary>
            Gets or sets the duration, in minutes, during which the result of the cached method is stored in cache after it has been
            added to or accessed from the cache. The expiration is extended every time the value is accessed from the cache.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.CachingContextKind">
      <summary>
            Enumerates the kinds of <see cref="T:PostSharp.Patterns.Caching.ICachingContext" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Caching.CachingContextKind.None">
      <summary>
            None (a null implementation of <see cref="T:PostSharp.Patterns.Caching.ICachingContext" />).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Caching.CachingContextKind.Cache">
      <summary>
            The <see cref="T:PostSharp.Patterns.Caching.ICachingContext" /> of a method being evaluated and added to the cache.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Caching.CachingContextKind.Recache">
      <summary>
            The <see cref="T:PostSharp.Patterns.Caching.ICachingContext" /> of a method being re-evaluated, ignoring the previous value, and replaced into the cache, using the
            <see cref="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Recache``1(System.Func{``0})" /> method.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.CachingException">
      <summary>
            Exception thrown by <c>PostSharp.Patterns.Caching</c>.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingException.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.CachingException" /> with the default error message.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserialization constructor.
            </summary>
      <param name="info">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>info</parameter>
            <parameter>M:PostSharp.Patterns.Caching.CachingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:PostSharp.Patterns.Caching.CachingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingException.#ctor(System.String)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.CachingException" /> with a given error message.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.CachingException" /> with a given error message and inner <see cref="T:System.Exception" />.
            </summary>
      <param name="message">The error message.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="T:PostSharp.Patterns.Caching.CachingProfile">
      <summary>
            Allows for centralized and run-time configuration of several instances of the <see cref="T:PostSharp.Patterns.Caching.CacheAttribute" /> aspect.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingProfile.#ctor(System.String)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.CachingProfile" />.
            </summary>
      <param name="name">Profile name (a case-insensitive string).</param>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CachingProfile.AbsoluteExpiration">
      <summary>
            Gets or sets the total duration during which the result of the current method is stored in cache. The absolute
            expiration time is counted from the moment the method is evaluated and cached.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CachingProfile.AutoReload">
      <summary>
            Determines whether the method calls are automatically reloaded (by re-evaluating the target method with the same arguments)
            when the cache item is removed from the cache.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Caching.CachingProfile.DefaultName">
      <summary>
            The name of the default profile.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CachingProfile.IsEnabled">
      <summary>
            Determines whether caching is enabled for the current profile.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CachingProfile.Name">
      <summary>
            Gets the profile name  (a case-insensitive string).
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CachingProfile.Priority">
      <summary>
            Gets or sets the priority of the cached methods.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CachingProfile.SlidingExpiration">
      <summary>
            Gets or sets the duration during which the result of the current method is stored in cache after it has been
            added to or accessed from the cache. The expiration is extended every time the value is accessed from the cache.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.CachingServices">
      <summary>
            The entry point to configure <c>PostSharp.Patterns.Caching</c> at run-time.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CachingServices.CurrentContext">
      <summary>
            Gets the current caching context, so dependencies can be added.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CachingServices.DefaultBackend">
      <summary>
            Gets or sets the default <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />, i.e. the physical storage of cache items.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CachingServices.DefaultKeyBuilder">
      <summary>
            Gets or sets the <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheKeyBuilder" /> used to generate caching keys, i.e. to serialize objects into a <see cref="T:System.String" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CachingServices.Profiles">
      <summary>
            Gets the repository of caching profiles (<see cref="T:PostSharp.Patterns.Caching.CachingProfile" />).
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.CachingServices.CachingProfileRegistry">
      <summary>
            Allows to configure caching profiles (<see cref="T:PostSharp.Patterns.Caching.CachingProfile" />), and therefore influence the behavior
            of the <see cref="T:PostSharp.Patterns.Caching.CacheAttribute" /> aspect at run-time. Exposed on the <see cref="P:PostSharp.Patterns.Caching.CachingServices.Profiles" /> property.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CachingServices.CachingProfileRegistry.Default">
      <summary>
            Gets the default <see cref="T:PostSharp.Patterns.Caching.CachingProfile" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CachingServices.CachingProfileRegistry.Item(System.String)">
      <summary>
            Gets a <see cref="T:PostSharp.Patterns.Caching.CachingProfile" /> of a given name. If no profile exists, a new profile is created, registered and returned.
            </summary>
      <param name="profileName">The profile name (a case-insensitive string).</param>
      <returns>A <see cref="T:PostSharp.Patterns.Caching.CachingProfile" /> object with name <paramref name="profileName" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.CachingProfileRegistry.Register(PostSharp.Patterns.Caching.CachingProfile)">
      <summary>
            Registers a <see cref="T:PostSharp.Patterns.Caching.CachingProfile" />.
            </summary>
      <param name="profile">A <see cref="T:PostSharp.Patterns.Caching.CachingProfile" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.CachingProfileRegistry.Reset">
      <summary>
            Resets the current <see cref="T:PostSharp.Patterns.Caching.CachingServices.CachingProfileRegistry" /> to the default values.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.CachingServices.CachingProfileRegistry.RevisionNumber">
      <summary>
            Gets the revision number of all caching profiles. This property is incremented every time
            a profile is registered or modified.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.CachingServices.Formatters">
      <summary>
            Allows to get and register formatters used to generate caching keys.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.CachingServices.Invalidation">
      <summary>
            Invalidates the cache.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Invalidate(PostSharp.Patterns.Caching.Dependencies.ICacheDependency)">
      <summary>
            Invalidates a cache dependency given as an <see cref="T:PostSharp.Patterns.Caching.Dependencies.ICacheDependency" />, i.e. removes all cache items that are dependent on this dependency.
            </summary>
      <param name="dependency">A dependency.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Invalidate``1(System.Func{``0})">
      <summary>
            Removes a method call result from the cache giving the delegate of the method. This overload is for methods with 0 parameter.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Invalidate``10(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``0},``1,``2,``3,``4,``5,``6,``7,``8,``9)">
      <summary>
            Removes a method call result from the cache giving the delegate of the method. This overload is for methods with 9 parameters.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
      <typeparam name="TParam7">Type of the 7-th parameter.</typeparam>
      <typeparam name="TParam8">Type of the 8-th parameter.</typeparam>
      <typeparam name="TParam9">Type of the 9-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Invalidate``11(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``0},``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
      <summary>
            Removes a method call result from the cache giving the delegate of the method. This overload is for methods with 10 parameters.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <param name="arg10">Value of the 10-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
      <typeparam name="TParam7">Type of the 7-th parameter.</typeparam>
      <typeparam name="TParam8">Type of the 8-th parameter.</typeparam>
      <typeparam name="TParam9">Type of the 9-th parameter.</typeparam>
      <typeparam name="TParam10">Type of the 10-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Invalidate``2(System.Func{``1,``0},``1)">
      <summary>
            Removes a method call result from the cache giving the delegate of the method. This overload is for methods with 1 parameter.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Invalidate``3(System.Func{``1,``2,``0},``1,``2)">
      <summary>
            Removes a method call result from the cache giving the delegate of the method. This overload is for methods with 2 parameters.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Invalidate``4(System.Func{``1,``2,``3,``0},``1,``2,``3)">
      <summary>
            Removes a method call result from the cache giving the delegate of the method. This overload is for methods with 3 parameters.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Invalidate``5(System.Func{``1,``2,``3,``4,``0},``1,``2,``3,``4)">
      <summary>
            Removes a method call result from the cache giving the delegate of the method. This overload is for methods with 4 parameters.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Invalidate``6(System.Func{``1,``2,``3,``4,``5,``0},``1,``2,``3,``4,``5)">
      <summary>
            Removes a method call result from the cache giving the delegate of the method. This overload is for methods with 5 parameters.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Invalidate``7(System.Func{``1,``2,``3,``4,``5,``6,``0},``1,``2,``3,``4,``5,``6)">
      <summary>
            Removes a method call result from the cache giving the delegate of the method. This overload is for methods with 6 parameters.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Invalidate``8(System.Func{``1,``2,``3,``4,``5,``6,``7,``0},``1,``2,``3,``4,``5,``6,``7)">
      <summary>
            Removes a method call result from the cache giving the delegate of the method. This overload is for methods with 7 parameters.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
      <typeparam name="TParam7">Type of the 7-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Invalidate``9(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``0},``1,``2,``3,``4,``5,``6,``7,``8)">
      <summary>
            Removes a method call result from the cache giving the delegate of the method. This overload is for methods with 8 parameters.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
      <typeparam name="TParam7">Type of the 7-th parameter.</typeparam>
      <typeparam name="TParam8">Type of the 8-th parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Invalidate(System.Object)">
      <summary>
            Invalidates a cache dependency given an <see cref="T:System.Object" />, i.e. removes all cached items that are dependent on that object.
            </summary>
      <param name="dependency">Typically, an <see cref="T:System.Object" />. If a <see cref="T:System.String" />, <see cref="T:System.Delegate" /> or <see cref="T:PostSharp.Patterns.Caching.Dependencies.ICacheDependency" />
            is passed, the proper overload of the method is invoked. Otherwise, <paramref name="dependency" /> is wrapped into an <see cref="T:PostSharp.Patterns.Caching.Dependencies.ObjectDependency" /> object.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Invalidate(System.Reflection.MethodInfo,System.Object,System.Object[])">
      <summary>
            Removes a method call result from the cache giving the <see cref="T:System.Reflection.MethodInfo" /> representing the method, the instance and the arguments of the method call.
            </summary>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> of the method call.</param>
      <param name="instance">The value of the <c>this</c> instance, or <c>null</c> for static methods.</param>
      <param name="args">The method arguments.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Invalidate(System.String)">
      <summary>
            Invalidates a cache dependency given as <see cref="T:System.String" />, i.e. removes all cache items that are dependent on this dependency key.
            </summary>
      <param name="dependencyKey"></param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.InvalidateAsync(PostSharp.Patterns.Caching.Dependencies.ICacheDependency)">
      <summary>
            Asynchronously invalidates a cache dependency given as an <see cref="T:PostSharp.Patterns.Caching.Dependencies.ICacheDependency" />, i.e. removes all cache items that are dependent on this dependency.
            </summary>
      <param name="dependency">A dependency.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.InvalidateAsync``1(System.Func{``0})">
      <summary>
            Asynchronously removes a method call result from the cache giving the delegate of the method. This overload is for methods with 0 parameter.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.InvalidateAsync``10(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``0},``1,``2,``3,``4,``5,``6,``7,``8,``9)">
      <summary>
            Asynchronously removes a method call result from the cache giving the delegate of the method. This overload is for methods with 9 parameters.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
      <typeparam name="TParam7">Type of the 7-th parameter.</typeparam>
      <typeparam name="TParam8">Type of the 8-th parameter.</typeparam>
      <typeparam name="TParam9">Type of the 9-th parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.InvalidateAsync``11(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``0},``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
      <summary>
            Asynchronously removes a method call result from the cache giving the delegate of the method. This overload is for methods with 10 parameters.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <param name="arg10">Value of the 10-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
      <typeparam name="TParam7">Type of the 7-th parameter.</typeparam>
      <typeparam name="TParam8">Type of the 8-th parameter.</typeparam>
      <typeparam name="TParam9">Type of the 9-th parameter.</typeparam>
      <typeparam name="TParam10">Type of the 10-th parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.InvalidateAsync``2(System.Func{``1,``0},``1)">
      <summary>
            Asynchronously removes a method call result from the cache giving the delegate of the method. This overload is for methods with 1 parameter.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.InvalidateAsync``3(System.Func{``1,``2,``0},``1,``2)">
      <summary>
            Asynchronously removes a method call result from the cache giving the delegate of the method. This overload is for methods with 2 parameters.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.InvalidateAsync``4(System.Func{``1,``2,``3,``0},``1,``2,``3)">
      <summary>
            Asynchronously removes a method call result from the cache giving the delegate of the method. This overload is for methods with 3 parameters.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.InvalidateAsync``5(System.Func{``1,``2,``3,``4,``0},``1,``2,``3,``4)">
      <summary>
            Asynchronously removes a method call result from the cache giving the delegate of the method. This overload is for methods with 4 parameters.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.InvalidateAsync``6(System.Func{``1,``2,``3,``4,``5,``0},``1,``2,``3,``4,``5)">
      <summary>
            Asynchronously removes a method call result from the cache giving the delegate of the method. This overload is for methods with 5 parameters.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.InvalidateAsync``7(System.Func{``1,``2,``3,``4,``5,``6,``0},``1,``2,``3,``4,``5,``6)">
      <summary>
            Asynchronously removes a method call result from the cache giving the delegate of the method. This overload is for methods with 6 parameters.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.InvalidateAsync``8(System.Func{``1,``2,``3,``4,``5,``6,``7,``0},``1,``2,``3,``4,``5,``6,``7)">
      <summary>
            Asynchronously removes a method call result from the cache giving the delegate of the method. This overload is for methods with 7 parameters.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
      <typeparam name="TParam7">Type of the 7-th parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.InvalidateAsync``9(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``0},``1,``2,``3,``4,``5,``6,``7,``8)">
      <summary>
            Asynchronously removes a method call result from the cache giving the delegate of the method. This overload is for methods with 8 parameters.
            </summary>
      <param name="method">A delegate of the method to invalidate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
      <typeparam name="TParam7">Type of the 7-th parameter.</typeparam>
      <typeparam name="TParam8">Type of the 8-th parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.InvalidateAsync(System.Object)">
      <summary>
            Asynchronously invalidates a cache dependency given an <see cref="T:System.Object" />, i.e. removes all cached items that are dependent on that object.
            </summary>
      <param name="dependency">Typically, an <see cref="T:System.Object" />. If a <see cref="T:System.String" />, <see cref="T:System.Delegate" /> or <see cref="T:PostSharp.Patterns.Caching.Dependencies.ICacheDependency" />
            is passed, the proper overload of the method is invoked. Otherwise, <paramref name="dependency" /> is wrapped into an <see cref="T:PostSharp.Patterns.Caching.Dependencies.ObjectDependency" /> object.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.InvalidateAsync(System.Reflection.MethodInfo,System.Object,System.Object[])">
      <summary>
            Asynchronously removes a method call result from the cache giving the <see cref="T:System.Reflection.MethodInfo" /> representing the method, the instance and the arguments of the method call.
            </summary>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> of the method call.</param>
      <param name="instance">The value of the <c>this</c> instance, or <c>null</c> for static methods.</param>
      <param name="args">The method arguments.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Caching.CachingServices.Invalidation.InvalidateAsync(System.Reflection.MethodInfo,System.Object,System.Object[])</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.InvalidateAsync(System.String)">
      <summary>
            Asynchronously invalidates a cache dependency given as <see cref="T:System.String" />, i.e. removes all cache items that are dependent on this dependency key.
            </summary>
      <param name="dependencyKey"></param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Caching.CachingServices.Invalidation.InvalidateAsync(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Recache``1(System.Func{``0})">
      <summary>
            Evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 0 parameter.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <returns>The return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Recache``10(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``0},``1,``2,``3,``4,``5,``6,``7,``8,``9)">
      <summary>
            Evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 9 parameters.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
      <typeparam name="TParam7">Type of the 7-th parameter.</typeparam>
      <typeparam name="TParam8">Type of the 8-th parameter.</typeparam>
      <typeparam name="TParam9">Type of the 9-th parameter.</typeparam>
      <returns>The return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Recache``11(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``0},``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
      <summary>
            Evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 10 parameters.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <param name="arg10">Value of the 10-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
      <typeparam name="TParam7">Type of the 7-th parameter.</typeparam>
      <typeparam name="TParam8">Type of the 8-th parameter.</typeparam>
      <typeparam name="TParam9">Type of the 9-th parameter.</typeparam>
      <typeparam name="TParam10">Type of the 10-th parameter.</typeparam>
      <returns>The return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Recache``2(System.Func{``1,``0},``1)">
      <summary>
            Evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 1 parameter.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <returns>The return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Recache``3(System.Func{``1,``2,``0},``1,``2)">
      <summary>
            Evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 2 parameters.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <returns>The return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Recache``4(System.Func{``1,``2,``3,``0},``1,``2,``3)">
      <summary>
            Evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 3 parameters.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <returns>The return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Recache``5(System.Func{``1,``2,``3,``4,``0},``1,``2,``3,``4)">
      <summary>
            Evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 4 parameters.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <returns>The return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Recache``6(System.Func{``1,``2,``3,``4,``5,``0},``1,``2,``3,``4,``5)">
      <summary>
            Evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 5 parameters.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <returns>The return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Recache``7(System.Func{``1,``2,``3,``4,``5,``6,``0},``1,``2,``3,``4,``5,``6)">
      <summary>
            Evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 6 parameters.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
      <returns>The return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Recache``8(System.Func{``1,``2,``3,``4,``5,``6,``7,``0},``1,``2,``3,``4,``5,``6,``7)">
      <summary>
            Evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 7 parameters.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
      <typeparam name="TParam7">Type of the 7-th parameter.</typeparam>
      <returns>The return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.Recache``9(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``0},``1,``2,``3,``4,``5,``6,``7,``8)">
      <summary>
            Evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 8 parameters.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
      <typeparam name="TParam7">Type of the 7-th parameter.</typeparam>
      <typeparam name="TParam8">Type of the 8-th parameter.</typeparam>
      <returns>The return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.RecacheAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>
            Asynchronously evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 0 parameter.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that evaluates to the return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.RecacheAsync``10(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Threading.Tasks.Task{``0}},``1,``2,``3,``4,``5,``6,``7,``8,``9)">
      <summary>
            Asynchronously evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 9 parameters.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
      <typeparam name="TParam7">Type of the 7-th parameter.</typeparam>
      <typeparam name="TParam8">Type of the 8-th parameter.</typeparam>
      <typeparam name="TParam9">Type of the 9-th parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that evaluates to the return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.RecacheAsync``11(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Threading.Tasks.Task{``0}},``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
      <summary>
            Asynchronously evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 10 parameters.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <param name="arg9">Value of the 9-th parameter.</param>
      <param name="arg10">Value of the 10-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
      <typeparam name="TParam7">Type of the 7-th parameter.</typeparam>
      <typeparam name="TParam8">Type of the 8-th parameter.</typeparam>
      <typeparam name="TParam9">Type of the 9-th parameter.</typeparam>
      <typeparam name="TParam10">Type of the 10-th parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that evaluates to the return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.RecacheAsync``2(System.Func{``1,System.Threading.Tasks.Task{``0}},``1)">
      <summary>
            Asynchronously evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 1 parameter.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that evaluates to the return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.RecacheAsync``3(System.Func{``1,``2,System.Threading.Tasks.Task{``0}},``1,``2)">
      <summary>
            Asynchronously evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 2 parameters.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that evaluates to the return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.RecacheAsync``4(System.Func{``1,``2,``3,System.Threading.Tasks.Task{``0}},``1,``2,``3)">
      <summary>
            Asynchronously evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 3 parameters.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that evaluates to the return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.RecacheAsync``5(System.Func{``1,``2,``3,``4,System.Threading.Tasks.Task{``0}},``1,``2,``3,``4)">
      <summary>
            Asynchronously evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 4 parameters.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that evaluates to the return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.RecacheAsync``6(System.Func{``1,``2,``3,``4,``5,System.Threading.Tasks.Task{``0}},``1,``2,``3,``4,``5)">
      <summary>
            Asynchronously evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 5 parameters.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that evaluates to the return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.RecacheAsync``7(System.Func{``1,``2,``3,``4,``5,``6,System.Threading.Tasks.Task{``0}},``1,``2,``3,``4,``5,``6)">
      <summary>
            Asynchronously evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 6 parameters.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that evaluates to the return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.RecacheAsync``8(System.Func{``1,``2,``3,``4,``5,``6,``7,System.Threading.Tasks.Task{``0}},``1,``2,``3,``4,``5,``6,``7)">
      <summary>
            Asynchronously evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 7 parameters.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
      <typeparam name="TParam7">Type of the 7-th parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that evaluates to the return value of <paramref name="method" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.CachingServices.Invalidation.RecacheAsync``9(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,System.Threading.Tasks.Task{``0}},``1,``2,``3,``4,``5,``6,``7,``8)">
      <summary>
            Asynchronously evaluates a method, ignoring the currently cached value, and replaces the corresponding cache item with the new return value of the method. This overload is for methods with 8 parameters.
            </summary>
      <param name="method">A delegate of the method to evaluate.</param>
      <param name="arg1">Value of the first parameter.</param>
      <param name="arg2">Value of the second parameter.</param>
      <param name="arg3">Value of the third parameter.</param>
      <param name="arg4">Value of the 4-th parameter.</param>
      <param name="arg5">Value of the 5-th parameter.</param>
      <param name="arg6">Value of the 6-th parameter.</param>
      <param name="arg7">Value of the 7-th parameter.</param>
      <param name="arg8">Value of the 8-th parameter.</param>
      <typeparam name="TReturn">The return type of the method.</typeparam>
      <typeparam name="TParam1">Type of the first parameter.</typeparam>
      <typeparam name="TParam2">Type of the second parameter.</typeparam>
      <typeparam name="TParam3">Type of the third parameter.</typeparam>
      <typeparam name="TParam4">Type of the 4-th parameter.</typeparam>
      <typeparam name="TParam5">Type of the 5-th parameter.</typeparam>
      <typeparam name="TParam6">Type of the 6-th parameter.</typeparam>
      <typeparam name="TParam7">Type of the 7-th parameter.</typeparam>
      <typeparam name="TParam8">Type of the 8-th parameter.</typeparam>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that evaluates to the return value of <paramref name="method" />.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Caching.ICachingContext">
      <summary>
            Represents the context in which a method being cached is executing. 
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.ICachingContext.AddDependencies(System.Collections.Generic.IEnumerable{PostSharp.Patterns.Caching.Dependencies.ICacheDependency})">
      <summary>
            Adds a set of dependencies represented as <see cref="T:PostSharp.Patterns.Caching.Dependencies.ICacheDependency" /> to the current context.
            </summary>
      <param name="dependencies">A set of <see cref="T:PostSharp.Patterns.Caching.Dependencies.ICacheDependency" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.ICachingContext.AddDependencies(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Adds a set of dependencies represented as keys to the current context.
            </summary>
      <param name="dependencies">A set of dependency keys.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.ICachingContext.AddDependency(PostSharp.Patterns.Caching.Dependencies.ICacheDependency)">
      <summary>
            Adds a dependency represented as an <see cref="T:PostSharp.Patterns.Caching.Dependencies.ICacheDependency" /> to the current context.
            </summary>
      <param name="dependency">A dependency.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.ICachingContext.AddDependency(System.Object)">
      <summary>
            Adds a dependency <see cref="T:System.Object" /> the current context. Calling this method is equivalent to wrapping the <see cref="T:System.Object" />
            into an <see cref="T:PostSharp.Patterns.Caching.Dependencies.ObjectDependency" /> and calling the <see cref="M:PostSharp.Patterns.Caching.ICachingContext.AddDependency(PostSharp.Patterns.Caching.Dependencies.ICacheDependency)" /> overload.
            </summary>
      <param name="dependency">A dependency object.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.ICachingContext.AddDependency(System.String)">
      <summary>
            Adds a dependency represented as a key to the current context.
            </summary>
      <param name="dependency">A dependency key.</param>
    </member>
    <member name="P:PostSharp.Patterns.Caching.ICachingContext.Kind">
      <summary>
            Gets the kind of <see cref="T:PostSharp.Patterns.Caching.ICachingContext" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.ICachingContext.Parent">
      <summary>
            Gets the parent context.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.InvalidateCacheAttribute">
      <summary>
            Custom attribute that, when applied on a method, causes an invocation of this method to remove from
            the cache the result of invocations of other given methods with the same parameter values. 
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.InvalidateCacheAttribute.#ctor(System.String[])">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.InvalidateCacheAttribute" /> that invalidates method of the same type as the
            type to which the current <see cref="T:PostSharp.Patterns.Caching.InvalidateCacheAttribute" /> aspect is being applied.
            </summary>
      <param name="methodNames">A list of names of methods to invalidate. All parameters of these methods (except those marked 
            with <see cref="T:PostSharp.Patterns.Caching.NotCacheKeyAttribute" />) must have a parameter of the same name and compatible type in the target
            method of the current <see cref="T:PostSharp.Patterns.Caching.InvalidateCacheAttribute" /> aspect.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.InvalidateCacheAttribute.#ctor(System.Type,System.String[])">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.InvalidateCacheAttribute" /> that invalidates method of a different type than the
            type to which the current <see cref="T:PostSharp.Patterns.Caching.InvalidateCacheAttribute" /> aspect is being applied.
            </summary>
      <param name="declaringType">The type containing the methods to invalidate.</param>
      <param name="methodNames">A list of names of methods to invalidate. All parameters of these methods (except those marked 
            with <see cref="T:PostSharp.Patterns.Caching.NotCacheKeyAttribute" />) must have a parameter of the same name and compatible type in the target
            method of the current <see cref="T:PostSharp.Patterns.Caching.InvalidateCacheAttribute" /> aspect.</param>
    </member>
    <member name="P:PostSharp.Patterns.Caching.InvalidateCacheAttribute.AllowMultipleOverloads">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Caching.InvalidateCacheAttribute" /> can match several overloads of the methods.
            The default value is <c>false</c>, which means that an error will be emitted if the current <see cref="T:PostSharp.Patterns.Caching.InvalidateCacheAttribute" /> matches
            several methods of the same name.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.NotCacheKeyAttribute">
      <summary>
            Custom attribute that, when applied to a parameter of a cached method (i.e. a method enhanced by the <see cref="T:PostSharp.Patterns.Caching.CacheAttribute" /> aspect),
            excludes this parameter from being a part of the cache key.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.NotCacheKeyAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Caching.NotCacheKeyAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Backends.MemoryCachingBackend">
      <summary>
            A <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" /> based on the system <see cref="T:System.Runtime.Caching.MemoryCache" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Backends.MemoryCachingBackend.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.Backends.MemoryCachingBackend" /> based on the <see cref="P:System.Runtime.Caching.MemoryCache.Default" /> instance of the <see cref="T:System.Runtime.Caching.MemoryCache" /> class.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Backends.MemoryCachingBackend.#ctor(System.Runtime.Caching.MemoryCache)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.Backends.MemoryCachingBackend" /> based on a given <see cref="T:System.Runtime.Caching.MemoryCache" />.
            </summary>
      <param name="cache">A <see cref="T:System.Runtime.Caching.MemoryCache" />, or <c>null</c> to use  the <see cref="P:System.Runtime.Caching.MemoryCache.Default" /> instance of the <see cref="T:System.Runtime.Caching.MemoryCache" /> class.</param>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Backends.NullCachingBackend">
      <summary>
            An implementation of <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" /> that does not cache at all.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Backends.NullCachingBackend.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Caching.Backends.NullCachingBackend</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Backends.NullCachingBackend.ClearCore">
      <summary>
            Clears the cache. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. 
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Backends.NullCachingBackend.ContainsDependencyCore(System.String)">
      <summary>
            Determines whether the cache contains a given dependency.  This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The dependency key.</param>
      <returns>
        <c>true</c> if the cache contains the dependency <paramref name="key" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Backends.NullCachingBackend.ContainsItemCore(System.String)">
      <summary>
            Determines whether the cache contains an item of a given key. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The key of the cache item.</param>
      <returns>
        <c>true</c> if the cache contains an item whose key is <paramref name="key" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Backends.NullCachingBackend.GetItemCore(System.String,System.Boolean)">
      <summary>
            Gets a cache item given its key. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The cache item.</param>
      <param name="includeDependencies">
        <c>true</c> if the <see cref="P:PostSharp.Patterns.Caching.Implementation.CacheValue.Dependencies" /> properties of the
            resulting <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheValue" /> should be populated, otherwise <c>false</c>.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheValue" />, or <c>null</c> if there is no item in cache of the given <paramref name="key" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Backends.NullCachingBackend.InvalidateDependencyCore(System.String)">
      <summary>
            Removes from the cache all items that have a specific dependency.  This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The dependency key.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Backends.NullCachingBackend.RemoveItemCore(System.String)">
      <summary>
            Removes a cache item from the cache given its key. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The key of the cache item.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Backends.NullCachingBackend.SetItemCore(System.String,PostSharp.Patterns.Caching.Implementation.CacheItem)">
      <summary>
            Sets a cache item. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The key of the cache item.</param>
      <param name="item">The cache item.</param>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Backends.TwoLayerCacheValue">
      <summary>
            The object stored in the remote class.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Backends.TwoLayerCacheValue.#ctor(PostSharp.Patterns.Caching.Implementation.CacheItem)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.Backends.TwoLayerCacheValue" />.
            </summary>
      <param name="item">The original <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheItem" />.</param>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Backends.TwoLayerCacheValue.AbsoluteExpiration">
      <summary>
            Gets or sets the absolute expiration of the cache item.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Backends.TwoLayerCacheValue.Priority">
      <summary>
            Gets or sets the cache item priority.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Backends.TwoLayerCacheValue.SlidingExpiration">
      <summary>
            Gets or sets the sliding expiration of the cache item.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Backends.TwoLayerCacheValue.Timestamp">
      <summary>
            Gets or sets the timestamp of the cache item.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Backends.TwoLayerCacheValue.Value">
      <summary>
            Gets or sets the cached value.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Backends.TwoLayerCachingBackendEnhancer">
      <summary>
            A <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer" /> that adds a local (fast) <see cref="T:PostSharp.Patterns.Caching.Backends.MemoryCachingBackend" /> to a remote (slower) cache.
            This class is typically instantiate in the back-end factory method. You should normally not use this class unless you develop a custom caching back-end.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Backends.TwoLayerCachingBackendEnhancer.#ctor(PostSharp.Patterns.Caching.Implementation.CachingBackend,PostSharp.Patterns.Caching.Backends.MemoryCachingBackend)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.Backends.TwoLayerCachingBackendEnhancer" />.
            </summary>
      <param name="remoteCache">The remote <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />.</param>
      <param name="memoryCache">A <see cref="T:PostSharp.Patterns.Caching.Backends.MemoryCachingBackend" />, or <c>null</c> to use a new default <see cref="T:PostSharp.Patterns.Caching.Backends.MemoryCachingBackend" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Backends.TwoLayerCachingBackendEnhancer.WhenSynchronizationSignalReceived(System.Guid,System.Threading.CancellationToken)">
      <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task" /> that completes when a given synchronization signal is received from the physical implementation of the cache.
            </summary>
      <param name="guid">The <see cref="T:System.Guid" /> of the synchronization signal.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Dependencies.ICacheDependency">
      <summary>
            Interface that must be implemented by classes that need to be used as cache dependencies,
            for use with the <see cref="M:PostSharp.Patterns.Caching.ICachingContext.AddDependency(PostSharp.Patterns.Caching.Dependencies.ICacheDependency)" /> method.
            Alternatively, custom classes may implement the <see cref="T:PostSharp.Patterns.Formatters.IFormattable" /> interface or simply
            the <see cref="M:System.Object.ToString" /> method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Dependencies.ICacheDependency.GetCacheKey">
      <summary>
            Gets a string that uniquely represents the current object.
            </summary>
      <returns>A string that uniquely represents the current object.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Dependencies.ObjectDependency">
      <summary>
            Wraps an <see cref="T:System.Object" /> into an <see cref="T:PostSharp.Patterns.Caching.Dependencies.ObjectDependency" />. The <see cref="M:PostSharp.Patterns.Caching.Dependencies.ObjectDependency.GetCacheKey" />
            relies on the <see cref="P:PostSharp.Patterns.Caching.CachingServices.DefaultKeyBuilder" /> to create the cache key of the wrapped object.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Dependencies.ObjectDependency.#ctor(System.Object)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.Dependencies.ObjectDependency" />.
            </summary>
      <param name="dependencyObject">The wrapped object.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Dependencies.ObjectDependency.Equals(PostSharp.Patterns.Caching.Dependencies.ICacheDependency)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Caching.Dependencies.ObjectDependency.Equals(PostSharp.Patterns.Caching.Dependencies.ICacheDependency)</parameter>
          </include>
        </markup>
      </summary>
      <param name="other">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>other</parameter>
            <parameter>M:PostSharp.Patterns.Caching.Dependencies.ObjectDependency.Equals(PostSharp.Patterns.Caching.Dependencies.ICacheDependency)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Caching.Dependencies.ObjectDependency.Equals(PostSharp.Patterns.Caching.Dependencies.ICacheDependency)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Dependencies.ObjectDependency.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object. </param>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Dependencies.ObjectDependency.GetCacheKey">
      <summary>
            Gets a string that uniquely represents the current object.
            </summary>
      <returns>A string that uniquely represents the current object.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Dependencies.ObjectDependency.GetHashCode">
      <summary>Serves as the default hash function. </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Dependencies.ObjectDependency.Object">
      <summary>
            Gets the wrapped object.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Dependencies.StringDependency">
      <summary>
            A cache dependency that is already represented as a string.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Dependencies.StringDependency.#ctor(System.String)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.Dependencies.StringDependency" />.
            </summary>
      <param name="key">The cache dependency.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Dependencies.StringDependency.Equals(PostSharp.Patterns.Caching.Dependencies.ICacheDependency)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:PostSharp.Patterns.Caching.Dependencies.StringDependency.Equals(PostSharp.Patterns.Caching.Dependencies.ICacheDependency)</parameter>
          </include>
        </markup>
      </summary>
      <param name="other">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>other</parameter>
            <parameter>M:PostSharp.Patterns.Caching.Dependencies.StringDependency.Equals(PostSharp.Patterns.Caching.Dependencies.ICacheDependency)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Caching.Dependencies.StringDependency.Equals(PostSharp.Patterns.Caching.Dependencies.ICacheDependency)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Dependencies.StringDependency.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object. </param>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Dependencies.StringDependency.GetCacheKey">
      <summary>
            Gets a string that uniquely represents the current object.
            </summary>
      <returns>A string that uniquely represents the current object.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Dependencies.StringDependency.GetHashCode">
      <summary>Serves as the default hash function. </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Formatters.CachingFormattingRole">
      <summary>
            The <see cref="T:PostSharp.Patterns.Formatters.FormattingRole" /> for <c>PostSharp.Patterns.Caching</c>.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Formatters.CachingFormattingRole.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.Formatters.CachingFormattingRole" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Formatters.CachingFormattingRole.LoggingRole">
      <summary>
            Gets the logging role name (see <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles" />).
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Formatters.CachingFormattingRole.Name">
      <summary>
            Gets the name of the <see cref="T:PostSharp.Patterns.Formatters.FormattingRole" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Implementation.CacheDependencyInvalidatedEventArgs">
      <summary>
            Arguments of the <see cref="E:PostSharp.Patterns.Caching.Implementation.CachingBackend.DependencyInvalidated" /> event.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheDependencyInvalidatedEventArgs.#ctor(System.String,System.Guid)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheDependencyInvalidatedEventArgs" />.
            </summary>
      <param name="key">The key of the invalidated dependency.</param>
      <param name="sourceId">The <see cref="T:System.Guid" /> of the <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />
            instance that requested the invalidation, or <see cref="F:System.Guid.Empty" />
            if this information is not available.</param>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheDependencyInvalidatedEventArgs.Key">
      <summary>
            Gets the key of the invalidated dependency.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheDependencyInvalidatedEventArgs.SourceId">
      <summary>
            Gets the <see cref="T:System.Guid" /> of the <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />
            instance that requested the invalidation, or <see cref="F:System.Guid.Empty" />
            if this information is not available.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Implementation.CachedMethodInfo">
      <summary>
            Encapsulates information about a method being cached.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachedMethodInfo.IsThisParameterIgnored">
      <summary>
            Determines whether the value of the <c>this</c> parameter
            (for non-static methods) should be included in the cache key.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachedMethodInfo.Method">
      <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo" /> of the method.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachedMethodInfo.Parameters">
      <summary>
            Gets an array of <see cref="T:PostSharp.Patterns.Caching.Implementation.CachedParameterInfo" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Implementation.CachedParameterInfo">
      <summary>
            Encapsulates information about a parameter of a method
            being cached. Exposed by the <see cref="T:PostSharp.Patterns.Caching.Implementation.CachedMethodInfo" /> class.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachedParameterInfo.IsIgnored">
      <summary>
            Determines whether the parameter should be excluded
            from the cache key. When the value of this property is <c>false</c>,
            the parameter should be included in the cache key.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachedParameterInfo.Parameter">
      <summary>
            Gets the <see cref="T:System.Reflection.ParameterInfo" /> of the parameter.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Implementation.CacheInvalidator">
      <summary>
            Base class for a kind of <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer" /> that allows several instances of the same application to use
            a local cache, and synchronize themselves by sending invalidation messages over a publish/subscribe channel.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheInvalidator.#ctor(PostSharp.Patterns.Caching.Implementation.CachingBackend,PostSharp.Patterns.Caching.Implementation.CacheInvalidatorOptions)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />/
            </summary>
      <param name="underlyingBackend">The underlying <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" /> (typically an in-memory cache).</param>
      <param name="options">Options of the new <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheInvalidator" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheInvalidator.InvalidateDependencyAsyncCore(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously removes from the cache all items that have a specific dependency.  This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The dependency key.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheInvalidator.InvalidateDependencyCore(System.String)">
      <summary>
            Removes from the cache all items that have a specific dependency.  This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The dependency key.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheInvalidator.OnMessageReceived(System.String)">
      <summary>
            Implementations of <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheInvalidator" /> must call this method when an invalidation message is received.
            </summary>
      <param name="message">The serialized invalidation message.</param>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheInvalidator.Options">
      <summary>
            Gets the options of the current <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheInvalidator" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheInvalidator.RemoveItemAsyncCore(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously removes a cache item from the cache given its key. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The key of the cache item.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheInvalidator.RemoveItemCore(System.String)">
      <summary>
            Removes a cache item from the cache given its key. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The key of the cache item.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheInvalidator.SendMessageAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Sends an invalidation message over the message bus of the implementation.
            </summary>
      <param name="message">A serialized, opaque serialization message.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheInvalidator.SendSynchronizationSignalAsyncCore(System.Guid,System.Threading.CancellationToken)">
      <summary>
            Sends a synchronization signal of a given <see cref="T:System.Guid" /> to the physical implementation of the cache. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked.
            </summary>
      <param name="guid">The <see cref="T:System.Guid" /> of the synchronization signal.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Implementation.CacheInvalidatorOptions">
      <summary>
            Options for the <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheInvalidator" /> class.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheInvalidatorOptions.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Caching.Implementation.CacheInvalidatorOptions</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheInvalidatorOptions.Prefix">
      <summary>
            Gets or sets the prefix of messages sent by the <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheInvalidator" />.
            Messages received by the <see cref="M:PostSharp.Patterns.Caching.Implementation.CacheInvalidator.OnMessageReceived(System.String)" /> method are
            ignored if they don't start with the proper prefix.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Implementation.CacheItem">
      <summary>
            Represents an item being added to the cache.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheItem.#ctor(System.Object,System.Collections.Immutable.IImmutableList{System.String},PostSharp.Patterns.Caching.Implementation.CacheItemConfiguration)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheItem" />.
            </summary>
      <param name="value">The value to be cached (<c>null</c> is a valid value).</param>
      <param name="dependencies">A list of dependencies, or <c>null</c> if there is no dependency.</param>
      <param name="configuration">The configuration of the cache item, or <c>null</c> to use the default configuration.</param>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheItem.Configuration">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheItemConfiguration" /> for the current item,
            or <c>null</c> to use the default configuration.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheItem.Dependencies">
      <summary>
            Gets the list of dependencies of the current item, or <c>null</c>
            if there is no dependency.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheItem.Equals(PostSharp.Patterns.Caching.Implementation.CacheItem)">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheItem" /> is structurally equal to another <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheItem" />.
            </summary>
      <param name="other">A <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheItem" />.</param>
      <returns>
        <c>true</c> both items are equal, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheItem.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object. </param>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheItem.GetHashCode">
      <summary>Serves as the default hash function. </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheItem.op_Equality(PostSharp.Patterns.Caching.Implementation.CacheItem,PostSharp.Patterns.Caching.Implementation.CacheItem)">
      <summary>
            Determines whether two instances of the <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheItem" /> class are structurally equal.
            </summary>
      <param name="first">A <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheItem" />.</param>
      <param name="second">A <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheItem" />.</param>
      <returns>
        <c>true</c> if <paramref name="first" /> equals <paramref name="second" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheItem.op_Inequality(PostSharp.Patterns.Caching.Implementation.CacheItem,PostSharp.Patterns.Caching.Implementation.CacheItem)">
      <summary>
            Determines whether two instances of the <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheItem" /> class are structurally different.
            </summary>
      <param name="first">A <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheItem" />.</param>
      <param name="second">A <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheItem" />.</param>
      <returns>
        <c>true</c> if <paramref name="first" /> is differnt to <paramref name="second" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheItem.Value">
      <summary>
            Gets the value to be cached (<c>null</c> is a valid value).
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Implementation.CacheItemConfiguration">
      <summary>
            Configuration of a <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheItem" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheItemConfiguration.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Caching.Implementation.CacheItemConfiguration</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheItemConfiguration.AbsoluteExpiration">
      <summary>
            Gets or sets the total duration during which the result of the cached methods  is stored in cache. The absolute
            expiration time is counted from the moment the method is evaluated and cached.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheItemConfiguration.AutoReload">
      <summary>
            Determines whether the method calls are automatically reloaded (by re-evaluating the target method with the same arguments)
            when the cache item is removed from the cache.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheItemConfiguration.IgnoreThisParameter">
      <summary>
            Determines whether the <c>this</c> instance should be a part of the cache key. The default value of this property is <c>false</c>,
            which means that by default the <c>this</c> instance is a part of the cache key.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheItemConfiguration.IsEnabled">
      <summary>
            Determines whether caching is enabled.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheItemConfiguration.Priority">
      <summary>
            Gets or sets the priority of the cached methods.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheItemConfiguration.ProfileName">
      <summary>
            Gets or sets the name of the <see cref="T:PostSharp.Patterns.Caching.CachingProfile" />  that contains the configuration of the cached methods.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheItemConfiguration.SlidingExpiration">
      <summary>
            Gets or sets the duration during which the result of the cached methods is stored in cache after it has been
            added to or accessed from the cache. The expiration is extended every time the value is accessed from the cache.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Implementation.CacheItemPriority">
      <summary>
            Enumerates the priorities of a <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheItem" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Caching.Implementation.CacheItemPriority.Default">
      <summary>
            Default.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Caching.Implementation.CacheItemPriority.NotRemovable">
      <summary>
            Never removed, unless explicitly required through invalidation methods.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Implementation.CacheItemRemovedEventArgs">
      <summary>
            Arguments of the <see cref="E:PostSharp.Patterns.Caching.Implementation.CachingBackend.ItemRemoved" /> event.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheItemRemovedEventArgs.Key">
      <summary>
            Gets the key of the removed cached item.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheItemRemovedEventArgs.RemovedReason">
      <summary>
            Gets the reason of the removal.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheItemRemovedEventArgs.SourceId">
      <summary>
            Gets the <see cref="T:System.Guid" /> of the <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" /> that caused the removal,
            or <see cref="F:System.Guid.Empty" /> if it cannot be determined or does not apply.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Implementation.CacheItemRemovedReason">
      <summary>
            Enumerates the reasons why an item can be removed from the cache.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Caching.Implementation.CacheItemRemovedReason.Removed">
      <summary>
            Directly removed from the cache, by calling the <see cref="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.RemoveItem(System.String)" />, or an invalidation method that invalidates
            a cached method directly (not indirectly through dependencies).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Caching.Implementation.CacheItemRemovedReason.Expired">
      <summary>
            Removed because of <see cref="P:PostSharp.Patterns.Caching.Implementation.CacheItemConfiguration.AbsoluteExpiration" /> or <see cref="P:PostSharp.Patterns.Caching.Implementation.CacheItemConfiguration.SlidingExpiration" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Caching.Implementation.CacheItemRemovedReason.Evicted">
      <summary>
            Evicted to make space for newer cache items.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Caching.Implementation.CacheItemRemovedReason.Invalidated">
      <summary>
            Indirectly invalidated (through dependencies).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Caching.Implementation.CacheItemRemovedReason.Other">
      <summary>
            Other (or any reason that cannot be determined).
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Implementation.CacheKeyBuilder">
      <summary>
            Builds cache item keys and dependency keys.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheKeyBuilder.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheKeyBuilder" /> with a default maximal key size of 2048 characters.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheKeyBuilder.#ctor(System.Int32)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheKeyBuilder" /> and specifies the maximal key size.
            </summary>
      <param name="maxKeySize">The maximal number of characters in cache keys.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheKeyBuilder.AppendArgument(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Type,System.Object)">
      <summary>
            Appends a method argument to an <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />. To avoid ambiguities between different overloads of the same method, the default implementation appends
            both the parameter type and the value key.
            </summary>
      <param name="stringBuilder">An <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</param>
      <param name="parameterType">The type of the parameter.</param>
      <param name="parameterValue">The value assigned to the parameter (can be <c>null</c>).</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheKeyBuilder.AppendMethod(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Reflection.MethodInfo)">
      <summary>
            Appends the method name and generic arguments to an <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="stringBuilder">An <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /></param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheKeyBuilder.AppendObject(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Object)">
      <summary>
            Appends a string representing an <see cref="T:System.Object" /> to an <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="stringBuilder">An <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</param>
      <param name="o">An <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheKeyBuilder.AppendType(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Type)">
      <summary>
            Appends a <see cref="T:System.Type" /> name to an <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="stringBuilder">An <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</param>
      <param name="type">A <see cref="T:System.Type" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheKeyBuilder.BuildDependencyKey(System.Object)">
      <summary>
            Builds a dependency key for a given object.
            </summary>
      <param name="o">An object.</param>
      <returns>A dependency key that uniquely represents <paramref name="o" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheKeyBuilder.BuildMethodKey(System.Reflection.MethodInfo,System.Collections.Generic.IList{System.Object},System.Object)">
      <summary>
            Builds a cache key for a given method call.
            </summary>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> representing the method.</param>
      <param name="arguments">The arguments passed to the <paramref name="method" /> call.</param>
      <param name="instance">The <c>this</c> instance of the <paramref name="method" /> call, or <c>null</c> if <paramref name="method" /> is static.</param>
      <returns>A string uniquely representing the method call.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheKeyBuilder.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheKeyBuilder.Dispose(System.Boolean)">
      <summary>
            Disposes the current object.
            </summary>
      <param name="disposing">
        <c>true</c> if the <see cref="M:PostSharp.Patterns.Caching.Implementation.CacheKeyBuilder.Dispose" /> method has been called, <c>false</c> if the object is being finalized by the garbage collector.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheKeyBuilder.GetCachedMethodInfo(System.Reflection.MethodInfo)">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Caching.Implementation.CachedMethodInfo" /> for a given <see cref="T:System.Reflection.MethodInfo" />.
            </summary>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" />.</param>
      <returns>The <see cref="T:PostSharp.Patterns.Caching.Implementation.CachedMethodInfo" /> for <paramref name="method" />, or <c>null</c> if no <see cref="T:PostSharp.Patterns.Caching.Implementation.CachedMethodInfo" /> was registered for <paramref name="method" />.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheKeyBuilder.IgnoredParameterSentinel">
      <summary>
            A sentinel object that means that the parameter is not a part of the cache key, and should be ignored.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheKeyBuilder.MaxKeySize">
      <summary>
            Gets the maximal number of characters in cache keys.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Implementation.CacheValue">
      <summary>
            Return value of the <see cref="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.GetItem(System.String,System.Boolean)" /> method, i.e. represents an item retrieved from the cache (items being stored in the cache are represented by the <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheItem" /> class).
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheValue.#ctor(System.Object,System.Collections.Immutable.IImmutableList{System.String})">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheValue" />.
            </summary>
      <param name="value">The cached value.</param>
      <param name="dependencies">The list of dependencies (or <c>null</c> if there are no dependencies or dependencies were not requested).</param>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheValue.Dependencies">
      <summary>
            Gets the list of dependencies of the cache. 
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CacheValue.Value">
      <summary>
            Gets the cached value.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CacheValue.WithValue(System.Object)">
      <summary>
            Returns a new <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheValue" /> with different <see cref="P:PostSharp.Patterns.Caching.Implementation.CacheValue.Value" /> but identical <see cref="P:PostSharp.Patterns.Caching.Implementation.CacheValue.Dependencies" />.
            </summary>
      <param name="value">The new value.</param>
      <returns>A new <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheValue" /> with different <see cref="P:PostSharp.Patterns.Caching.Implementation.CacheValue.Value" /> but identical <see cref="P:PostSharp.Patterns.Caching.Implementation.CacheValue.Dependencies" />.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Implementation.CachingBackend">
      <summary>
            An abstraction of the physical implementation of the cache, where the <see cref="T:PostSharp.Patterns.Caching.CacheAttribute" /> ends up writing to and reading from.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.Clear">
      <summary>
            Clears the cache.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.ClearAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously clears the cache.
            </summary>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.ClearAsyncCore(System.Threading.CancellationToken)">
      <summary>
            Asynchronously clears the cache. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked.
            </summary>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.ClearCore">
      <summary>
            Clears the cache. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. 
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.ContainsDependency(System.String)">
      <summary>
            Determines whether the cache contains a given dependency.
            </summary>
      <param name="key">The dependency key.</param>
      <returns>
        <c>true</c> if the cache contains the dependency <paramref name="key" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.ContainsDependencyAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously determines whether the cache contains a given dependency.
            </summary>
      <param name="key">The dependency key.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> evaluating to <c>true</c> if the cache contains the dependency <paramref name="key" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.ContainsDependencyAsyncCore(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously determines whether the cache contains a given dependency.  This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The dependency key.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> evaluating to <c>true</c> if the cache contains the dependency <paramref name="key" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.ContainsDependencyCore(System.String)">
      <summary>
            Determines whether the cache contains a given dependency.  This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The dependency key.</param>
      <returns>
        <c>true</c> if the cache contains the dependency <paramref name="key" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.ContainsItem(System.String)">
      <summary>
            Determines whether the cache contains an item of a given key.
            </summary>
      <param name="key">The key of the cache item.</param>
      <returns>
        <c>true</c> if the cache contains an item whose key is <paramref name="key" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.ContainsItemAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously determines whether the cache contains an item of a given key.
            </summary>
      <param name="key">The key of the cache item.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that evaluates to <c>true</c> if the cache contains an item whose key is <paramref name="key" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.ContainsItemAsyncCore(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously determines whether the cache contains an item of a given key. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The key of the cache item.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that evaluates to <c>true</c> if the cache contains an item whose key is <paramref name="key" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.ContainsItemCore(System.String)">
      <summary>
            Determines whether the cache contains an item of a given key. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The key of the cache item.</param>
      <returns>
        <c>true</c> if the cache contains an item whose key is <paramref name="key" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.CreateFeatures">
      <summary>
            Creates a <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackendFeatures" /> object, which describes set of features implemented by the back-end.
            This method is invoked the first time the <see cref="P:PostSharp.Patterns.Caching.Implementation.CachingBackend.SupportedFeatures" /> property is evaluated. The result is then cached.
            </summary>
      <returns>A new instance of the <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancerFeatures" /> class.</returns>
    </member>
    <member name="E:PostSharp.Patterns.Caching.Implementation.CachingBackend.DependencyInvalidated">
      <summary>
            Events raised when a dependency is invalidated. Check the <see cref="P:PostSharp.Patterns.Caching.Implementation.CachingBackendFeatures.Events" />
            property to see if the current <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" /> supports events.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.Dispose">
      <summary>
            Synchronously dispose the current <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>PostSharp.Patterns.Caching.Implementation.CachingBackend</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>PostSharp.Patterns.Caching.Implementation.CachingBackend</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.DisposeAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously dispose the current <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />.
            </summary>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.DisposeAsyncCore(System.Threading.CancellationToken)">
      <summary>
            Asynchronously disposes the current <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked.
            </summary>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.DisposeCore(System.Boolean)">
      <summary>
            Synchronously disposes the current <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked.
            </summary>
      <param name="disposing">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>disposing</parameter>
            <parameter>M:PostSharp.Patterns.Caching.Implementation.CachingBackend.DisposeCore(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.EnqueueBackgroundTask(System.Func{System.Threading.Tasks.Task})">
      <summary>
            Enqueues a background task.
            </summary>
      <param name="task">A function creating a <see cref="T:System.Threading.Tasks.Task" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.GetItem(System.String,System.Boolean)">
      <summary>
            Gets a cache item given its key.
            </summary>
      <param name="key">The cache item.</param>
      <param name="includeDependencies">
        <c>true</c> if the <see cref="P:PostSharp.Patterns.Caching.Implementation.CacheValue.Dependencies" /> properties of the
            resulting <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheValue" /> should be populated, otherwise <c>false</c>.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheValue" />, or <c>null</c> if there is no item in cache of the given <paramref name="key" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.GetItemAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
      <summary>
            Asynchronously gets a cache item given its key.
            </summary>
      <param name="key">The cache item.</param>
      <param name="includeDependencies">
        <c>true</c> if the <see cref="P:PostSharp.Patterns.Caching.Implementation.CacheValue.Dependencies" /> properties of the
            resulting <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheValue" /> should be populated, otherwise <c>false</c>.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> evaluating to a <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheValue" />, or evaluating to <c>null</c> if there is no item in cache of the given <paramref name="key" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.GetItemAsyncCore(System.String,System.Boolean,System.Threading.CancellationToken)">
      <summary>
            Asynchronously gets a cache item given its key. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The cache item.</param>
      <param name="includeDependencies">
        <c>true</c> if the <see cref="P:PostSharp.Patterns.Caching.Implementation.CacheValue.Dependencies" /> properties of the
            resulting <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheValue" /> should be populated, otherwise <c>false</c>.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> evaluating to a <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheValue" />, or evaluating to <c>null</c> if there is no item in cache of the given <paramref name="key" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.GetItemCore(System.String,System.Boolean)">
      <summary>
            Gets a cache item given its key. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The cache item.</param>
      <param name="includeDependencies">
        <c>true</c> if the <see cref="P:PostSharp.Patterns.Caching.Implementation.CacheValue.Dependencies" /> properties of the
            resulting <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheValue" /> should be populated, otherwise <c>false</c>.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheValue" />, or <c>null</c> if there is no item in cache of the given <paramref name="key" />.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachingBackend.Id">
      <summary>
            Gets the <see cref="T:System.Guid" /> of the current <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.InvalidateDependency(System.String)">
      <summary>
            Removes from the cache all items that have a specific dependency.
            </summary>
      <param name="key">The dependency key.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.InvalidateDependencyAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously removes from the cache all items that have a specific dependency.  This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The dependency key.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.InvalidateDependencyAsyncCore(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously removes from the cache all items that have a specific dependency.  This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The dependency key.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.InvalidateDependencyCore(System.String)">
      <summary>
            Removes from the cache all items that have a specific dependency.  This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The dependency key.</param>
    </member>
    <member name="E:PostSharp.Patterns.Caching.Implementation.CachingBackend.ItemRemoved">
      <summary>
            Event raised when a cache item is removed from the cache. Check the <see cref="P:PostSharp.Patterns.Caching.Implementation.CachingBackendFeatures.Events" />
            property to see if the current <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" /> supports events.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachingBackend.Logger">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> that implementations can use to emit
            log records.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.OnDependencyInvalidated(PostSharp.Patterns.Caching.Implementation.CacheDependencyInvalidatedEventArgs)">
      <summary>
            Raises the <see cref="E:PostSharp.Patterns.Caching.Implementation.CachingBackend.DependencyInvalidated" /> event given a <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheDependencyInvalidatedEventArgs" />.
            </summary>
      <param name="args">A <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheDependencyInvalidatedEventArgs" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.OnDependencyInvalidated(System.String,System.Guid)">
      <summary>
            Raises the <see cref="E:PostSharp.Patterns.Caching.Implementation.CachingBackend.DependencyInvalidated" /> event , but lazily instantiates the <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheDependencyInvalidatedEventArgs" />
            if there is an event client.
            </summary>
      <param name="key">The key of the removed cache item.</param>
      <param name="sourceId">The <see cref="T:System.Guid" /> of the <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" /> instance that removed the item,.
            or <see cref="F:System.Guid.Empty" /> if the source <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" /> cannot be determined.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.OnItemRemoved(PostSharp.Patterns.Caching.Implementation.CacheItemRemovedEventArgs)">
      <summary>
            Raises the <see cref="E:PostSharp.Patterns.Caching.Implementation.CachingBackend.ItemRemoved" /> event given a <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheItemRemovedEventArgs" />.
            </summary>
      <param name="args">Event arguments.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.OnItemRemoved(System.String,PostSharp.Patterns.Caching.Implementation.CacheItemRemovedReason,System.Guid)">
      <summary>
            Raises the <see cref="E:PostSharp.Patterns.Caching.Implementation.CachingBackend.ItemRemoved" /> event, but lazily instantiates the <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheItemRemovedEventArgs" />
            if there is an event client.
            </summary>
      <param name="key">The key of the removed cache item.</param>
      <param name="reason">The reason of the removal.</param>
      <param name="sourceId">The <see cref="T:System.Guid" /> of the <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" /> instance that removed the item,.
            or <see cref="F:System.Guid.Empty" /> if the source <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" /> cannot be determined.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.OnSynchronizationSignalReceived(System.Guid)">
      <summary>
            Signals that a specific synchronization signal has been received. This completes the <see cref="T:System.Threading.Tasks.Task" /> returned by the
            <see cref="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.WhenSynchronizationSignalReceived(System.Guid,System.Threading.CancellationToken)" /> method.
            </summary>
      <param name="guid">The <see cref="T:System.Guid" /> of the synchronization signal.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.RemoveItem(System.String)">
      <summary>
            Removes a cache item from the cache given its key.
            </summary>
      <param name="key">The key of the cache item.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.RemoveItemAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously removes a cache item from the cache given its key.
            </summary>
      <param name="key">The key of the cache item.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.RemoveItemAsyncCore(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously removes a cache item from the cache given its key. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The key of the cache item.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.RemoveItemCore(System.String)">
      <summary>
            Removes a cache item from the cache given its key. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The key of the cache item.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.SendSynchronizationSignalAsync(System.Guid,System.Threading.CancellationToken)">
      <summary>
            Sends a synchronization signal of a given <see cref="T:System.Guid" /> to the physical implementation of the cache.
            </summary>
      <param name="guid">The <see cref="T:System.Guid" /> of the synchronization signal.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.SendSynchronizationSignalAsyncCore(System.Guid,System.Threading.CancellationToken)">
      <summary>
            Sends a synchronization signal of a given <see cref="T:System.Guid" /> to the physical implementation of the cache. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked.
            </summary>
      <param name="guid">The <see cref="T:System.Guid" /> of the synchronization signal.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.SetItem(System.String,PostSharp.Patterns.Caching.Implementation.CacheItem)">
      <summary>
            Sets a cache item.
            </summary>
      <param name="key">The key of the cache item.</param>
      <param name="item">The cache item.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.SetItemAsync(System.String,PostSharp.Patterns.Caching.Implementation.CacheItem,System.Threading.CancellationToken)">
      <summary>
            Asynchronously sets a cache item.
            </summary>
      <param name="key">The key of the cache item.</param>
      <param name="item">The cache item.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.SetItemAsyncCore(System.String,PostSharp.Patterns.Caching.Implementation.CacheItem,System.Threading.CancellationToken)">
      <summary>
            Asynchronously sets a cache item. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            The default implementation is to call the synchronous <see cref="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.SetItemCore(System.String,PostSharp.Patterns.Caching.Implementation.CacheItem)" /> method.
            </summary>
      <param name="key">The key of the cache item.</param>
      <param name="item">The cache item.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.SetItemCore(System.String,PostSharp.Patterns.Caching.Implementation.CacheItem)">
      <summary>
            Sets a cache item. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The key of the cache item.</param>
      <param name="item">The cache item.</param>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachingBackend.Status">
      <summary>
            Gets the status of the current <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" /> (<see cref="F:PostSharp.Patterns.Caching.Implementation.CachingBackendStatus.Default" />,
            <see cref="F:PostSharp.Patterns.Caching.Implementation.CachingBackendStatus.Disposing" /> or <see cref="F:PostSharp.Patterns.Caching.Implementation.CachingBackendStatus.Disposed" />).
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.StopAcceptingBackgroundTasks">
      <summary>
            Forbids the use of the <see cref="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.EnqueueBackgroundTask(System.Func{System.Threading.Tasks.Task})" /> method. This method is used for debugging purposes only.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachingBackend.SupportedFeatures">
      <summary>
            Gets the set of features supported by the current <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.SynchronizeAsync(System.Threading.CancellationToken)">
      <summary>
            Sends a synchronization signal to the physical implementation of the cache and wait until the signal is received back.
            </summary>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:PostSharp.Patterns.Caching.Implementation.CachingBackend.SynchronizeAsync(System.Threading.CancellationToken)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachingBackend.ValueAdapters">
      <summary>
            Gets the factory of value adapters (<see cref="T:PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter" />), which allow for instance to cache things like <see cref="T:System.IO.Stream" /> or <see cref="T:System.Collections.IEnumerable" />,
            which could not be otherwise cached.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.WhenBackgroundTasksCompleted(System.Threading.CancellationToken)">
      <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task" /> that completes when all enqueued background tasks complete.
            </summary>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that completes when all enqueued background tasks complete.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.WhenSynchronizationSignalReceived(System.Guid,System.Threading.CancellationToken)">
      <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task" /> that completes when a given synchronization signal is received from the physical implementation of the cache.
            </summary>
      <param name="guid">The <see cref="T:System.Guid" /> of the synchronization signal.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer">
      <summary>
            A base class for all cache enhancers. A <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer" /> is a node in a chain of responsibility where
            the last node is the physical implementation of the <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />. A <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer" />
            can add behaviors to a <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.#ctor(PostSharp.Patterns.Caching.Implementation.CachingBackend)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer" />.
            </summary>
      <param name="underlyingBackend">The next <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" /> in the chain of responsibility.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.ClearAsyncCore(System.Threading.CancellationToken)">
      <summary>
            Asynchronously clears the cache. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked.
            </summary>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.ClearCore">
      <summary>
            Clears the cache. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. 
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.ContainsDependencyAsyncCore(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously determines whether the cache contains a given dependency.  This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The dependency key.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> evaluating to <c>true</c> if the cache contains the dependency <paramref name="key" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.ContainsDependencyCore(System.String)">
      <summary>
            Determines whether the cache contains a given dependency.  This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The dependency key.</param>
      <returns>
        <c>true</c> if the cache contains the dependency <paramref name="key" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.ContainsItemAsyncCore(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously determines whether the cache contains an item of a given key. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The key of the cache item.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that evaluates to <c>true</c> if the cache contains an item whose key is <paramref name="key" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.ContainsItemCore(System.String)">
      <summary>
            Determines whether the cache contains an item of a given key. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The key of the cache item.</param>
      <returns>
        <c>true</c> if the cache contains an item whose key is <paramref name="key" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.CreateFeatures">
      <summary>
            Creates a <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackendFeatures" /> object, which describes set of features implemented by the back-end.
            This method is invoked the first time the <see cref="P:PostSharp.Patterns.Caching.Implementation.CachingBackend.SupportedFeatures" /> property is evaluated. The result is then cached.
            </summary>
      <returns>A new instance of the <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancerFeatures" /> class.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.DisposeAsyncCore(System.Threading.CancellationToken)">
      <summary>
            Asynchronously disposes the current <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked.
            </summary>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.DisposeCore(System.Boolean)">
      <summary>
            Synchronously disposes the current <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked.
            </summary>
      <param name="disposing">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>disposing</parameter>
            <parameter>M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.DisposeCore(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.GetItemAsyncCore(System.String,System.Boolean,System.Threading.CancellationToken)">
      <summary>
            Asynchronously gets a cache item given its key. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The cache item.</param>
      <param name="includeDependencies">
        <c>true</c> if the <see cref="P:PostSharp.Patterns.Caching.Implementation.CacheValue.Dependencies" /> properties of the
            resulting <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheValue" /> should be populated, otherwise <c>false</c>.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> evaluating to a <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheValue" />, or evaluating to <c>null</c> if there is no item in cache of the given <paramref name="key" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.GetItemCore(System.String,System.Boolean)">
      <summary>
            Gets a cache item given its key. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The cache item.</param>
      <param name="includeDependencies">
        <c>true</c> if the <see cref="P:PostSharp.Patterns.Caching.Implementation.CacheValue.Dependencies" /> properties of the
            resulting <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheValue" /> should be populated, otherwise <c>false</c>.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheValue" />, or <c>null</c> if there is no item in cache of the given <paramref name="key" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.InvalidateDependencyAsyncCore(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously removes from the cache all items that have a specific dependency.  This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The dependency key.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.InvalidateDependencyCore(System.String)">
      <summary>
            Removes from the cache all items that have a specific dependency.  This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The dependency key.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.OnBackendDependencyInvalidated(System.Object,PostSharp.Patterns.Caching.Implementation.CacheDependencyInvalidatedEventArgs)">
      <summary>
            Method invoked when the <see cref="E:PostSharp.Patterns.Caching.Implementation.CachingBackend.DependencyInvalidated" /> event of the next <see cref="P:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.UnderlyingBackend" />
            in the chain of responsibility is invoked.
            </summary>
      <param name="sender">The sender (typically the value of the <see cref="P:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.UnderlyingBackend" /> property).</param>
      <param name="args">The <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheDependencyInvalidatedEventArgs" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.OnBackendItemRemoved(System.Object,PostSharp.Patterns.Caching.Implementation.CacheItemRemovedEventArgs)">
      <summary>
            Method invoked when the <see cref="E:PostSharp.Patterns.Caching.Implementation.CachingBackend.ItemRemoved" /> event of the next <see cref="P:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.UnderlyingBackend" />
            in the chain of responsibility is invoked.
            </summary>
      <param name="sender">The sender (typically the value of the <see cref="P:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.UnderlyingBackend" /> property).</param>
      <param name="args">The <see cref="T:PostSharp.Patterns.Caching.Implementation.CacheItemRemovedEventArgs" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.RemoveItemAsyncCore(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously removes a cache item from the cache given its key. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The key of the cache item.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.RemoveItemCore(System.String)">
      <summary>
            Removes a cache item from the cache given its key. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The key of the cache item.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.SendSynchronizationSignalAsyncCore(System.Guid,System.Threading.CancellationToken)">
      <summary>
            Sends a synchronization signal of a given <see cref="T:System.Guid" /> to the physical implementation of the cache. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked.
            </summary>
      <param name="guid">The <see cref="T:System.Guid" /> of the synchronization signal.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.SetItemAsyncCore(System.String,PostSharp.Patterns.Caching.Implementation.CacheItem,System.Threading.CancellationToken)">
      <summary>
            Asynchronously sets a cache item. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            The default implementation is to call the synchronous <see cref="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.SetItemCore(System.String,PostSharp.Patterns.Caching.Implementation.CacheItem)" /> method.
            </summary>
      <param name="key">The key of the cache item.</param>
      <param name="item">The cache item.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.SetItemCore(System.String,PostSharp.Patterns.Caching.Implementation.CacheItem)">
      <summary>
            Sets a cache item. This protected method is part of the implementation API and is meant to be overridden in user code, not invoked. Arguments are already validated by the consumer API.
            </summary>
      <param name="key">The key of the cache item.</param>
      <param name="item">The cache item.</param>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.UnderlyingBackend">
      <summary>
            Gets the next <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" /> in the chain of responsibility.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer.WhenSynchronizationSignalReceived(System.Guid,System.Threading.CancellationToken)">
      <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task" /> that completes when a given synchronization signal is received from the physical implementation of the cache.
            </summary>
      <param name="guid">The <see cref="T:System.Guid" /> of the synchronization signal.</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancerFeatures">
      <summary>
            An abstract implementation of <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancerFeatures" /> for use in implementations of <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancer" />,
            where the default behavior is to return the features of the underlying <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancerFeatures.#ctor(PostSharp.Patterns.Caching.Implementation.CachingBackendFeatures)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancerFeatures" />.
            </summary>
      <param name="underlyingBackendFeatures">The feature of the underlying <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />.</param>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancerFeatures.Blocking">
      <summary>
            Determines whether methods that modify the cache content run to completion before the control is given back to the calling method.
            If <c>false</c>, methods may run in the background, and the calling thread may not have a consistent view of the cache.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancerFeatures.Clear">
      <summary>
            Determines whether the <see cref="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.Clear" /> method is supported.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancerFeatures.ContainsDependency">
      <summary>
            Determines whether the <see cref="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.ContainsDependency(System.String)" /> method is supported.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancerFeatures.Dependencies">
      <summary>
            Determines whether dependencies are supported.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancerFeatures.Events">
      <summary>
            Determines whether the <see cref="E:PostSharp.Patterns.Caching.Implementation.CachingBackend.ItemRemoved" /> and <see cref="E:PostSharp.Patterns.Caching.Implementation.CachingBackend.DependencyInvalidated" /> events are raised.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachingBackendEnhancerFeatures.UnderlyingBackendFeatures">
      <summary>
            Gets the feature of the underlying <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Implementation.CachingBackendFeatures">
      <summary>
            List of features that can be implemented or not by a <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Implementation.CachingBackendFeatures.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Caching.Implementation.CachingBackendFeatures</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachingBackendFeatures.Blocking">
      <summary>
            Determines whether methods that modify the cache content run to completion before the control is given back to the calling method.
            If <c>false</c>, methods may run in the background, and the calling thread may not have a consistent view of the cache.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachingBackendFeatures.Clear">
      <summary>
            Determines whether the <see cref="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.Clear" /> method is supported.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachingBackendFeatures.ContainsDependency">
      <summary>
            Determines whether the <see cref="M:PostSharp.Patterns.Caching.Implementation.CachingBackend.ContainsDependency(System.String)" /> method is supported.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachingBackendFeatures.Dependencies">
      <summary>
            Determines whether dependencies are supported.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.CachingBackendFeatures.Events">
      <summary>
            Determines whether the <see cref="E:PostSharp.Patterns.Caching.Implementation.CachingBackend.ItemRemoved" /> and <see cref="E:PostSharp.Patterns.Caching.Implementation.CachingBackend.DependencyInvalidated" /> events are raised.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Implementation.CachingBackendStatus">
      <summary>
            Statuses of a <see cref="T:PostSharp.Patterns.Caching.Implementation.CachingBackend" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Caching.Implementation.CachingBackendStatus.Default">
      <summary>
            Default.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Caching.Implementation.CachingBackendStatus.Disposing">
      <summary>
            Being currently disposed.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Caching.Implementation.CachingBackendStatus.Disposed">
      <summary>
            Already disposed.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Caching.Implementation.CachingBackendStatus.DisposeFailed">
      <summary>
            A previous call of Dispose failed.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Implementation.ICacheItemConfiguration">
      <summary>
            Configuration of a cached method. This interface is implemented by several classes that allow to configure
            cached method.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.ICacheItemConfiguration.AbsoluteExpiration">
      <summary>
            Gets or sets the total duration during which the result of the cached methods  is stored in cache. The absolute
            expiration time is counted from the moment the method is evaluated and cached.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.ICacheItemConfiguration.AutoReload">
      <summary>
            Determines whether the method calls are automatically reloaded (by re-evaluating the target method with the same arguments)
            when the cache item is removed from the cache.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.ICacheItemConfiguration.IgnoreThisParameter">
      <summary>
            Determines whether the <c>this</c> instance should be a part of the cache key. The default value of this property is <c>false</c>,
            which means that by default the <c>this</c> instance is a part of the cache key.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.ICacheItemConfiguration.IsEnabled">
      <summary>
            Determines whether caching is enabled.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.ICacheItemConfiguration.Priority">
      <summary>
            Gets or sets the priority of the cached methods.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.ICacheItemConfiguration.ProfileName">
      <summary>
            Gets or sets the name of the <see cref="T:PostSharp.Patterns.Caching.CachingProfile" />  that contains the configuration of the cached methods.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Caching.Implementation.ICacheItemConfiguration.SlidingExpiration">
      <summary>
            Gets or sets the duration during which the result of the cached methods is stored in cache after it has been
            added to or accessed from the cache. The expiration is extended every time the value is accessed from the cache.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Serializers.BinarySerializer">
      <summary>
            An implementation of <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> that uses <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" />
            (for classes annotated with <see cref="T:System.SerializableAttribute" />).
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Serializers.BinarySerializer.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Caching.Serializers.BinarySerializer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Serializers.BinarySerializer.Deserialize(System.Byte[])">
      <summary>
            Deserializes a byte array into an object.
            </summary>
      <param name="array">A byte array.</param>
      <returns>The object represented by <paramref name="array" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Serializers.BinarySerializer.Serialize(System.Object)">
      <summary>
            Serializes an object into a byte array.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>A byte array representing <paramref name="value" />.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Serializers.DataContractSerializer">
      <summary>
            An implementation of <see cref="T:PostSharp.Patterns.Caching.Serializers.ISerializer" /> that uses <see cref="T:System.Runtime.Serialization.NetDataContractSerializer" />.
            You can derive this class to use a different <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Serializers.DataContractSerializer.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.Serializers.DataContractSerializer" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Serializers.DataContractSerializer.CreateSerializer">
      <summary>
            Creates a new <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />. The default implementation creates a <see cref="T:System.Runtime.Serialization.NetDataContractSerializer" />.
            </summary>
      <returns>A new <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Serializers.DataContractSerializer.Deserialize(System.Byte[])">
      <summary>
            Deserializes a byte array into an object.
            </summary>
      <param name="array">A byte array.</param>
      <returns>The object represented by <paramref name="array" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Serializers.DataContractSerializer.Serialize(System.Object)">
      <summary>
            Serializes an object into a byte array.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>A byte array representing <paramref name="value" />.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Serializers.ISerializer">
      <summary>
            Serializes an object into a byte array and deserializes the byte array back.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Serializers.ISerializer.Deserialize(System.Byte[])">
      <summary>
            Deserializes a byte array into an object.
            </summary>
      <param name="array">A byte array.</param>
      <returns>The object represented by <paramref name="array" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Serializers.ISerializer.Serialize(System.Object)">
      <summary>
            Serializes an object into a byte array.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>A byte array representing <paramref name="value" />.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Caching.Serializers.PortableSerializer">
      <summary>
            An implementation of <see cref="T:PostSharp.Patterns.Caching.Serializers.ISerializer" /> that uses the <see cref="T:PostSharp.Serialization.PortableFormatter" />
            (for classes annotated with <see cref="T:PostSharp.Serialization.PSerializableAttribute" />).
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Serializers.PortableSerializer.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.Serializers.PortableSerializer" /> with a new default <see cref="T:PostSharp.Serialization.PortableFormatter" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Serializers.PortableSerializer.#ctor(PostSharp.Serialization.PortableFormatter)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Caching.Serializers.PortableSerializer" /> with a given <see cref="T:PostSharp.Serialization.PortableFormatter" />.
            </summary>
      <param name="serializer">A <see cref="T:PostSharp.Serialization.PortableFormatter" />, or <c>null</c> to use a new default <see cref="T:PostSharp.Serialization.PortableFormatter" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Serializers.PortableSerializer.Deserialize(System.Byte[])">
      <summary>
            Deserializes a byte array into an object.
            </summary>
      <param name="array">A byte array.</param>
      <returns>The object represented by <paramref name="array" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.Serializers.PortableSerializer.Serialize(System.Object)">
      <summary>
            Serializes an object into a byte array.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>A byte array representing <paramref name="value" />.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter">
      <summary>
            Wraps uncachable classes or interfaces into cacheable objects, for instance an <see cref="T:System.Collections.IEnumerable" /> may be wrapped into an array.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter.GetExposedValue(System.Object)">
      <summary>
            Gets the value that should be exposed to the consuming application, i.e. typically the return value of the cached method.
            </summary>
      <param name="storedValue">The value that was stored in the cache.</param>
      <returns>The value that should be exposed to the consuming application, i.e. typically the return value of the cached method.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter.GetStoredValue(System.Object)">
      <summary>
            Gets the value that should be stored in the cache.
            </summary>
      <param name="value">The apparent value (typically the return value of the cached method).</param>
      <returns>A cacheable object.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter.GetStoredValueAsync(System.Object,System.Threading.CancellationToken)">
      <summary>
            Asynchronously gets the value that should be stored in the cache.
            </summary>
      <param name="value">The apparent value (typically the return value of the cached method).</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> returning a cacheable object.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter.IsAsyncSupported">
      <summary>
            Determines whether the <see cref="M:PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter.GetStoredValueAsync(System.Object,System.Threading.CancellationToken)" /> method is supported.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter`1">
      <summary>
            A strongly-typed version of <see cref="T:PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter" />.
            </summary>
      <typeparam name="T">Type of the exposed value, i.e. typically return type of the cached method.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter`1.GetExposedValue(System.Object)">
      <summary>
            Gets the value that should be exposed to the consuming application, i.e. typically the return value of the cached method.
            </summary>
      <param name="storedValue">The value that was stored in the cache.</param>
      <returns>The value that should be exposed to the consuming application, i.e. typically the return value of the cached method.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter`1.GetStoredValue(`0)">
      <summary>
            Gets the value that should be stored in the cache.
            </summary>
      <param name="value">The apparent value (typically the return value of the cached method).</param>
      <returns>A cacheable object.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter`1.GetStoredValueAsync(`0,System.Threading.CancellationToken)">
      <summary>
            Asynchronously gets the value that should be stored in the cache.
            </summary>
      <param name="value">The apparent value (typically the return value of the cached method).</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> returning a cacheable object.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Caching.ValueAdapters.ValueAdapter`1">
      <summary>
            An abstract implementation of <see cref="T:PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter`1" />.
            </summary>
      <typeparam name="T">Type of the exposed value, i.e. typically return type of the cached method.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Caching.ValueAdapters.ValueAdapter`1.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Caching.ValueAdapters.ValueAdapter`1</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.ValueAdapters.ValueAdapter`1.GetExposedValue(System.Object)">
      <summary>
            Gets the value that should be exposed to the consuming application, i.e. typically the return value of the cached method.
            </summary>
      <param name="storedValue">The value that was stored in the cache.</param>
      <returns>The value that should be exposed to the consuming application, i.e. typically the return value of the cached method.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.ValueAdapters.ValueAdapter`1.GetStoredValue(`0)">
      <summary>
            Gets the value that should be stored in the cache.
            </summary>
      <param name="value">The apparent value (typically the return value of the cached method).</param>
      <returns>A cacheable object.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.ValueAdapters.ValueAdapter`1.GetStoredValueAsync(`0,System.Threading.CancellationToken)">
      <summary>
            Asynchronously gets the value that should be stored in the cache.
            </summary>
      <param name="value">The apparent value (typically the return value of the cached method).</param>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> returning a cacheable object.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Caching.ValueAdapters.ValueAdapter`1.IsAsyncSupported">
      <summary>
            Determines whether the <see cref="M:PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter.GetStoredValueAsync(System.Object,System.Threading.CancellationToken)" /> method is supported.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Caching.ValueAdapters.ValueAdapterFactory">
      <summary>
            Registers and provides value adapters (<see cref="T:PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter" />), which allow for instance to cache things like <see cref="T:System.IO.Stream" /> or <see cref="T:System.Collections.IEnumerable" />,
            which could not be otherwise cached.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Caching.ValueAdapters.ValueAdapterFactory.Get(System.Type)">
      <summary>
            Gets an <see cref="T:PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter" /> given a value type.
            </summary>
      <param name="valueType">The type of the cached value (typically the return type of the cached method).</param>
      <returns>A value adapter for <paramref name="valueType" />, or <c>null</c> if no value adapter is available for <paramref name="valueType" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Caching.ValueAdapters.ValueAdapterFactory.Register``1(PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter{``0})">
      <summary>
            Registers an <see cref="T:PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter`1" />.
            </summary>
      <param name="valueAdapter">The adapter.</param>
      <typeparam name="T">The type of the cached value (typically the return type of the cached method).</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Caching.ValueAdapters.ValueAdapterFactory.Register(System.Type,PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter)">
      <summary>
            Registers an <see cref="T:PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter" /> instance and explicitly expecifies the value type.
            </summary>
      <param name="valueType">The type of the cached value (typically the return type of the cached method).</param>
      <param name="valueAdapter">The adapter.</param>
    </member>
    <member name="M:PostSharp.Patterns.Caching.ValueAdapters.ValueAdapterFactory.Register(System.Type,System.Type)">
      <summary>
            Registers a generic value adapter.
            </summary>
      <param name="valueType">The type of the cached value (typically the return type of the cached method).</param>
      <param name="valueAdapterType">The type of the value adapter. This type must implement the <see cref="T:PostSharp.Patterns.Caching.ValueAdapters.IValueAdapter" />
            interface and have the same number of generic parameters as <paramref name="valueType" />.
            </param>
    </member>
  </members>
</doc>